generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  videoId   Int        @unique
  title     String?
  lengthSec Int?
  thumbnail String?
  streamer  String?
  views     Int?
  language  String?
  date      String?
  comments  Comments[]
  complete  Boolean
}

model Card {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId Int
  keyword String
  average Int
  max     Int
  length  Int
  Result  Result[]
}

type Result {
  timeStamp String
  count     Int
  msgs      msg[]
}

model Comments {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  videoId           Int
  index             Int?
  messages          Messages[]
  hasNextPage       Boolean
  lastCommentSecond Int?
  video             Video      @relation(fields: [videoId], references: [videoId])
}

type Messages {
  contentOffsetSeconds Int
  msgs                 msg[]
}

type msg {
  cursor               String?
  contentOffsetSeconds Int?
  msg                  String
}
